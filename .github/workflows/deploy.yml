name: CI/CD Deploy To EC2


on:
  push:
    branches:
      - main

jobs:
    deploy:
      runs-on : ubuntu-latest
      steps:
          - name: Repository 코드 불러오기
            uses: actions/checkout@v4

          - name: JDK 17 버전 설치
            uses: actions/setup-java@v4
            with:
                distribution: temurin
                java-version: 17

          - name: gradle 파일 실행 권한 설정
            run: chmod +x gradlew

          - name: Build with Gradle
            run: ./gradlew clean build -x test

          - name : 도커 로그인
            uses: docker/login-action@v3
            with :
              username : ${{ secrets.DOCKERHUB_USER_NAME }}
              password : ${{ secrets.DOCKERHUB_TOKEN }}

          - name: 도커 이미지 빌드 및 푸시
            run: |
              docker build -t ${{  secrets.DOCKERHUB_USER_NAME }}/mobile-environment-app:latest .
              docker push ${{ secrets.DOCKERHUB_USER_NAME }}/mobile-environment-app:latest

          - name: EC2에서 기존 버전 제거
            uses: appleboy/ssh-action@v1.2.0
            with:
                host: ${{ secrets.EC2_HOST }}
                username: ${{ secrets.EC2_USERNAME }}
                key: ${{ secrets.EC2_SSH_KEY }}
                script: |
                  rm -rf ~/app
                  mkdir ~/app

          - name: EC2에 docker-compose.yml 전송
            uses: appleboy/scp-action@v0.1.7
            with:
              host: ${{ secrets.EC2_HOST }}
              username: ${{ secrets.EC2_USERNAME }}
              key: ${{ secrets.EC2_SSH_KEY }}
              source: "docker-compose.yml"
              target: "~/app/"

          - name: EC2에 .env 전송
            uses: appleboy/ssh-action@v1.2.0
            with:
              host: ${{ secrets.EC2_HOST }}
              username: ${{ secrets.EC2_USERNAME }}
              key: ${{ secrets.EC2_SSH_KEY }}
              script: |
                cd ~/app
                echo "${{ secrets.ENV_FILE }}" > .env

          - name: 배포 실행
            uses: appleboy/ssh-action@v1.2.0
            with:
                host: ${{ secrets.EC2_HOST }}
                username: ${{ secrets.EC2_USERNAME }}
                key: ${{ secrets.EC2_SSH_KEY }}
                script: |
                  cd ~/app            
                  docker-compose down
                  docker image prune -f  
                  docker-compose pull
                  docker-compose up -d
                  
